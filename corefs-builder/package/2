Config.in:# package is "foo", call it "lua-foo". Many packages currently don't follow
Config.in:if BR2_PACKAGE_MONO
Config.in:menu "Mono libraries/modules"
Config.in:menu "JSON/XML"
Config.in:menu "Multimedia"
Config.in:if BR2_PACKAGE_LINUX_PAM
Config.in:menu "Mail"
Config.in:menu "Miscellaneous"
doc-asciidoc.mk:# The variable <DOCUMENT_NAME>_SOURCES defines the dependencies.
doc-asciidoc.mk:# Handle a2x warning about --destination-dir option only applicable to HTML
doc-asciidoc.mk:define $(2)_$(4)_INSTALL_CMDS
doc-asciidoc.mk:	$$(Q)$$(call MESSAGE,"Generating $(7) $(1)...")
doc-asciidoc.mk:	$$($(2)_$(4)_INSTALL_CMDS)
doc-asciidoc.mk:# The variable <DOCUMENT_NAME>_SOURCES defines the dependencies.
doc-asciidoc.mk:# The variable <DOCUMENT_NAME>_RESOURCES defines where the document's
doc-asciidoc.mk:	$$(Q)$$(call MESSAGE,"Preparing the $(1) sources...")
doc-asciidoc.mk:$(call ASCIIDOC_INNER,$(1),$(2),$(3),xhtml,html,html,HTML,\
doc-asciidoc.mk:$(call ASCIIDOC_INNER,$(1),$(2),$(3),chunked,split-html,chunked,split HTML,\
doc-asciidoc.mk:	$$(Q)$$(RM) -rf $$(BUILD_DIR)/docs/$(1)
Makefile.in:ifndef MAKE
Makefile.in:MAKE := make
Makefile.in:ifndef HOSTMAKE
Makefile.in:HOSTMAKE = $(MAKE)
Makefile.in:HOSTMAKE := $(shell which $(HOSTMAKE) || type -p $(HOSTMAKE) || echo make)
Makefile.in:MAKE1 := $(HOSTMAKE) -j1
Makefile.in:override MAKE = $(HOSTMAKE) \
Makefile.in:	$(if $(findstring j,$(filter-out --%,$(MAKEFLAGS))),,-j$(PARALLEL_JOBS))
Makefile.in:# Compute GNU_TARGET_NAME
Makefile.in:GNU_TARGET_NAME = $(ARCH)-$(TARGET_VENDOR)-$(TARGET_OS)-$(LIBC)$(ABI)
Makefile.in:ifeq ($(BR2_BINFMT_FLAT),y)
Makefile.in:else ifeq ($(BR2_TOOLCHAIN_USES_MUSL),y)
Makefile.in:# The ABI suffix is a bit special on ARM, as it needs to be
Makefile.in:ifeq ($(BR2_ARM_EABIHF),y)
Makefile.in:# MPC8540s are e500v1 with single precision FP
Makefile.in:# section is placed into DTCM at link time. This is applicable for code
Makefile.in:ifeq ($(BR2_arc)$(BR2_ARC_ATOMIC_EXT),yy)
Makefile.in:STAGING_SUBDIR = $(GNU_TARGET_NAME)/sysroot
Makefile.in:ifeq ($(BR2_OPTIMIZE_0),y)
Makefile.in:TARGET_OPTIMIZATION = -O0
Makefile.in:ifeq ($(BR2_OPTIMIZE_1),y)
Makefile.in:TARGET_OPTIMIZATION = -O1
Makefile.in:ifeq ($(BR2_OPTIMIZE_2),y)
Makefile.in:TARGET_OPTIMIZATION = -O2
Makefile.in:ifeq ($(BR2_OPTIMIZE_3),y)
Makefile.in:TARGET_OPTIMIZATION = -O3
Makefile.in:ifeq ($(BR2_OPTIMIZE_G),y)
Makefile.in:TARGET_OPTIMIZATION = -Og
Makefile.in:ifeq ($(BR2_OPTIMIZE_S),y)
Makefile.in:TARGET_OPTIMIZATION = -Os
Makefile.in:TARGET_CFLAGS = $(TARGET_CPPFLAGS) $(TARGET_ABI) $(TARGET_OPTIMIZATION) $(TARGET_DEBUGGING)
Makefile.in:TARGET_FCFLAGS = $(TARGET_ABI) $(TARGET_OPTIMIZATION) $(TARGET_DEBUGGING)
Makefile.in:ifeq ($(BR2_BINFMT_FLAT),y)
Makefile.in:ifeq ($(BR2_BINFMT_FLAT_SHARED),y)
Makefile.in:ifeq ($(BR2_BINFMT_FLAT_SEP_DATA),y)
Makefile.in:TARGET_CROSS = $(HOST_DIR)/bin/$(GNU_TARGET_NAME)-
Makefile.in:TARGET_NM       = $(TARGET_CROSS)nm
Makefile.in:TARGET_OBJDUMP  = $(TARGET_CROSS)objdump
Makefile.in:STRIPCMD = $(TARGET_CROSS)strip --remove-section=.comment --remove-section=.note
Makefile.in:STRIPCMD = $(TARGET_STRIP)
Makefile.in:# Usage: option = $(call try-run, $(CC)...-o "$$TMP",option-ok,otherwise)
Makefile.in:# Exit code chooses option. "$$TMP" is can be used as temporary file and
Makefile.in:	TMP="$$(tempfile)";             \
Makefile.in:	rm -f "$$TMP")
Makefile.in:        $(HOSTCC) $(HOST_CFLAGS) $(1) -c -x c /dev/null -o "$$TMP",$(1),$(2))
Makefile.in:TARGET_MAKE_ENV = PATH=$(BR_PATH)
Makefile.in:	$(TARGET_MAKE_ENV) \
Makefile.in:	NM="$(TARGET_NM)" \
Makefile.in:	OBJDUMP="$(TARGET_OBJDUMP)" \
Makefile.in:	DEFAULT_ASSEMBLER="$(TARGET_AS)" \
Makefile.in:HOST_MAKE_ENV = \
Makefile.in:	PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1 \
Makefile.in:	PKG_CONFIG_ALLOW_SYSTEM_LIBS=1 \
Makefile.in:	$(HOST_MAKE_ENV) \
Makefile.in:	NM="$(HOSTNM)" \
Makefile.in:# AM_GNU_GETTEXT misdetects musl gettext support.
Makefile.in:ifeq ($(BR2_TOOLCHAIN_USES_MUSL):$(BR2_PACKAGE_GETTEXT_PROVIDES_LIBINTL),y:)
Makefile.in:ifeq ($(BR2_SYSTEM_ENABLE_NLS),y)
Makefile.in:ifeq ($(BR2_COMPILER_PARANOID_UNSAFE_PATH),y)
Makefile.in:export BR_COMPILER_PARANOID_UNSAFE_PATH=enabled
pkg-autotools.mk:# steps are doing, if needed. For example, if <PKG>_BUILD_CMDS is
pkg-autotools.mk:	@$(call MESSAGE,"Updating config.sub and config.guess")
pkg-autotools.mk:	@$(call MESSAGE,"Patching libtool")
pkg-autotools.mk:	@$(call MESSAGE,"Checking configure (powerpc64/powerpc64le)")
pkg-autotools.mk:	@$(call MESSAGE,"Gettextizing")
pkg-autotools.mk:	@$(call MESSAGE,"Autoreconfiguring")
pkg-autotools.mk:ifndef $(2)_MAKE
pkg-autotools.mk: ifdef $(3)_MAKE
pkg-autotools.mk:  $(2)_MAKE = $$($(3)_MAKE)
pkg-autotools.mk:  $(2)_MAKE ?= $$(MAKE)
pkg-autotools.mk:$(2)_MAKE_ENV			?=
pkg-autotools.mk:$(2)_MAKE_OPTS			?=
pkg-autotools.mk:ifndef $(2)_CONFIGURE_CMDS
pkg-autotools.mk:define $(2)_CONFIGURE_CMDS
pkg-autotools.mk:		--target=$$(GNU_TARGET_NAME) \
pkg-autotools.mk:		--host=$$(GNU_TARGET_NAME) \
pkg-autotools.mk:		--build=$$(GNU_HOST_NAME) \
pkg-autotools.mk:define $(2)_CONFIGURE_CMDS
pkg-autotools.mk:# Must be added after other pre-configure hooks that might regenerate the
pkg-autotools.mk:ifndef $(2)_BUILD_CMDS
pkg-autotools.mk:define $(2)_BUILD_CMDS
pkg-autotools.mk:	$$(TARGET_MAKE_ENV) $$($$(PKG)_MAKE_ENV) $$($$(PKG)_MAKE) $$($$(PKG)_MAKE_OPTS) -C $$($$(PKG)_SRCDIR)
pkg-autotools.mk:define $(2)_BUILD_CMDS
pkg-autotools.mk:	$$(HOST_MAKE_ENV) $$($$(PKG)_MAKE_ENV) $$($$(PKG)_MAKE) $$($$(PKG)_MAKE_OPTS) -C $$($$(PKG)_SRCDIR)
pkg-autotools.mk:ifndef $(2)_INSTALL_CMDS
pkg-autotools.mk:define $(2)_INSTALL_CMDS
pkg-autotools.mk:	$$(HOST_MAKE_ENV) $$($$(PKG)_MAKE_ENV) $$($$(PKG)_MAKE) $$($$(PKG)_INSTALL_OPTS) -C $$($$(PKG)_SRCDIR)
pkg-autotools.mk:ifndef $(2)_INSTALL_STAGING_CMDS
pkg-autotools.mk:define $(2)_INSTALL_STAGING_CMDS
pkg-autotools.mk:	$$(TARGET_MAKE_ENV) $$($$(PKG)_MAKE_ENV) $$($$(PKG)_MAKE) $$($$(PKG)_INSTALL_STAGING_OPTS) -C $$($$(PKG)_SRCDIR)
pkg-autotools.mk:ifndef $(2)_INSTALL_TARGET_CMDS
pkg-autotools.mk:define $(2)_INSTALL_TARGET_CMDS
pkg-autotools.mk:	$$(TARGET_MAKE_ENV) $$($$(PKG)_MAKE_ENV) $$($$(PKG)_MAKE) $$($$(PKG)_INSTALL_TARGET_OPTS) -C $$($$(PKG)_SRCDIR)
pkg-cmake.mk:# CMake package infrastructure
pkg-cmake.mk:# package .mk files for CMake packages. It should be used for all
pkg-cmake.mk:# packages that use CMake as their build system.
pkg-cmake.mk:# In terms of implementation, this CMake infrastructure requires
pkg-cmake.mk:# steps are doing, if needed. For example, if <PKG>_BUILD_CMDS is
pkg-cmake.mk:# build the package, instead of the default CMake behaviour. The
pkg-cmake.mk:CMAKE_HOST_C_COMPILER = $(HOST_DIR)/bin/ccache
pkg-cmake.mk:CMAKE_HOST_CXX_COMPILER = $(HOST_DIR)/bin/ccache
pkg-cmake.mk:CMAKE_HOST_C_COMPILER_ARG1 = $(HOSTCC_NOCCACHE)
pkg-cmake.mk:CMAKE_HOST_CXX_COMPILER_ARG1 = $(HOSTCXX_NOCCACHE)
pkg-cmake.mk:CMAKE_HOST_C_COMPILER = $(HOSTCC)
pkg-cmake.mk:CMAKE_HOST_CXX_COMPILER = $(HOSTCXX)
pkg-cmake.mk:CMAKE_QUIET = -DCMAKE_RULE_MESSAGES=OFF -DCMAKE_INSTALL_MESSAGE=NEVER
pkg-cmake.mk:# installation of a CMake package should be done, implements a few hooks to
pkg-cmake.mk:$(2)_MAKE			?= $$(MAKE)
pkg-cmake.mk:$(2)_MAKE_ENV			?=
pkg-cmake.mk:$(2)_MAKE_OPTS			?=
pkg-cmake.mk:ifndef $(2)_CONFIGURE_CMDS
pkg-cmake.mk:#   standard CMake variable to control the build of shared libraries
pkg-cmake.mk:#   documented as a standard CMake variable. If a package supports it,
pkg-cmake.mk:define $(2)_CONFIGURE_CMDS
pkg-cmake.mk:	rm -f CMakeCache.txt && \
pkg-cmake.mk:	$$($$(PKG)_CONF_ENV) $$(BR2_CMAKE) $$($$(PKG)_SRCDIR) \
pkg-cmake.mk:		-DCMAKE_TOOLCHAIN_FILE="$$(HOST_DIR)/share/buildroot/toolchainfile.cmake" \
pkg-cmake.mk:		-DCMAKE_INSTALL_PREFIX="/usr" \
pkg-cmake.mk:		-DCMAKE_COLOR_MAKEFILE=OFF \
pkg-cmake.mk:		-DBUILD_EXAMPLE=OFF \
pkg-cmake.mk:		-DBUILD_EXAMPLES=OFF \
pkg-cmake.mk:		$$(CMAKE_QUIET) \
pkg-cmake.mk:define $(2)_CONFIGURE_CMDS
pkg-cmake.mk:	rm -f CMakeCache.txt && \
pkg-cmake.mk:	PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1 \
pkg-cmake.mk:	PKG_CONFIG_ALLOW_SYSTEM_LIBS=1 \
pkg-cmake.mk:	$$($$(PKG)_CONF_ENV) $$(BR2_CMAKE) $$($$(PKG)_SRCDIR) \
pkg-cmake.mk:		-DCMAKE_INSTALL_SO_NO_EXE=0 \
pkg-cmake.mk:		-DCMAKE_FIND_ROOT_PATH="$$(HOST_DIR)" \
pkg-cmake.mk:		-DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM="BOTH" \
pkg-cmake.mk:		-DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY="BOTH" \
pkg-cmake.mk:		-DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE="BOTH" \
pkg-cmake.mk:		-DCMAKE_INSTALL_PREFIX="$$(HOST_DIR)" \
pkg-cmake.mk:		-DCMAKE_C_FLAGS="$$(HOST_CFLAGS)" \
pkg-cmake.mk:		-DCMAKE_CXX_FLAGS="$$(HOST_CXXFLAGS)" \
pkg-cmake.mk:		-DCMAKE_EXE_LINKER_FLAGS="$$(HOST_LDFLAGS)" \
pkg-cmake.mk:		-DCMAKE_ASM_COMPILER="$$(HOSTAS)" \
pkg-cmake.mk:		-DCMAKE_C_COMPILER="$$(CMAKE_HOST_C_COMPILER)" \
pkg-cmake.mk:		-DCMAKE_CXX_COMPILER="$$(CMAKE_HOST_CXX_COMPILER)" \
pkg-cmake.mk:		$(if $$(CMAKE_HOST_C_COMPILER_ARG1),\
pkg-cmake.mk:			-DCMAKE_C_COMPILER_ARG1="$$(CMAKE_HOST_C_COMPILER_ARG1)" \
pkg-cmake.mk:			-DCMAKE_CXX_COMPILER_ARG1="$$(CMAKE_HOST_CXX_COMPILER_ARG1)" \
pkg-cmake.mk:		-DCMAKE_COLOR_MAKEFILE=OFF \
pkg-cmake.mk:		-DBUILD_EXAMPLE=OFF \
pkg-cmake.mk:		-DBUILD_EXAMPLES=OFF \
pkg-cmake.mk:		$$(CMAKE_QUIET) \
pkg-cmake.mk:# Since some CMake modules (even upstream ones) use pgk_check_modules
pkg-cmake.mk:$(2)_DEPENDENCIES += $(BR2_CMAKE_HOST_DEPENDENCY)
pkg-cmake.mk:ifndef $(2)_BUILD_CMDS
pkg-cmake.mk:define $(2)_BUILD_CMDS
pkg-cmake.mk:	$$(TARGET_MAKE_ENV) $$($$(PKG)_MAKE_ENV) $$($$(PKG)_MAKE) $$($$(PKG)_MAKE_OPTS) -C $$($$(PKG)_BUILDDIR)
pkg-cmake.mk:define $(2)_BUILD_CMDS
pkg-cmake.mk:	$$(HOST_MAKE_ENV) $$($$(PKG)_MAKE_ENV) $$($$(PKG)_MAKE) $$($$(PKG)_MAKE_OPTS) -C $$($$(PKG)_BUILDDIR)
pkg-cmake.mk:ifndef $(2)_INSTALL_CMDS
pkg-cmake.mk:define $(2)_INSTALL_CMDS
pkg-cmake.mk:	$$(HOST_MAKE_ENV) $$($$(PKG)_MAKE_ENV) $$($$(PKG)_MAKE) $$($$(PKG)_MAKE_OPTS) $$($$(PKG)_INSTALL_OPTS) -C $$($$(PKG)_BUILDDIR)
pkg-cmake.mk:ifndef $(2)_INSTALL_STAGING_CMDS
pkg-cmake.mk:define $(2)_INSTALL_STAGING_CMDS
pkg-cmake.mk:	$$(TARGET_MAKE_ENV) $$($$(PKG)_MAKE_ENV) $$($$(PKG)_MAKE) $$($$(PKG)_MAKE_OPTS) $$($$(PKG)_INSTALL_STAGING_OPTS) -C $$($$(PKG)_BUILDDIR)
pkg-cmake.mk:ifndef $(2)_INSTALL_TARGET_CMDS
pkg-cmake.mk:define $(2)_INSTALL_TARGET_CMDS
pkg-cmake.mk:	$$(TARGET_MAKE_ENV) $$($$(PKG)_MAKE_ENV) $$($$(PKG)_MAKE) $$($$(PKG)_MAKE_OPTS) $$($$(PKG)_INSTALL_TARGET_OPTS) -C $$($$(PKG)_BUILDDIR)
pkg-cmake.mk:# cmake-package -- the target generator macro for CMake packages
pkg-cmake.mk:# Generation of the CMake toolchain file
pkg-cmake.mk:# CMAKE_SYSTEM_PROCESSOR should match uname -m
pkg-cmake.mk:ifeq ($(BR2_ARM_CPU_ARMV4),y)
pkg-cmake.mk:CMAKE_SYSTEM_PROCESSOR_ARM_VARIANT = armv4
pkg-cmake.mk:else ifeq ($(BR2_ARM_CPU_ARMV5),y)
pkg-cmake.mk:CMAKE_SYSTEM_PROCESSOR_ARM_VARIANT = armv5
pkg-cmake.mk:else ifeq ($(BR2_ARM_CPU_ARMV6),y)
pkg-cmake.mk:CMAKE_SYSTEM_PROCESSOR_ARM_VARIANT = armv6
pkg-cmake.mk:else ifeq ($(BR2_ARM_CPU_ARMV7A),y)
pkg-cmake.mk:CMAKE_SYSTEM_PROCESSOR_ARM_VARIANT = armv7
pkg-cmake.mk:else ifeq ($(BR2_ARM_CPU_ARMV8A),y)
pkg-cmake.mk:CMAKE_SYSTEM_PROCESSOR_ARM_VARIANT = armv8
pkg-cmake.mk:CMAKE_SYSTEM_PROCESSOR = $(CMAKE_SYSTEM_PROCESSOR_ARM_VARIANT)l
pkg-cmake.mk:CMAKE_SYSTEM_PROCESSOR = $(CMAKE_SYSTEM_PROCESSOR_ARM_VARIANT)b
pkg-cmake.mk:CMAKE_SYSTEM_PROCESSOR = ppc64
pkg-cmake.mk:CMAKE_SYSTEM_PROCESSOR = ppc64le
pkg-cmake.mk:CMAKE_SYSTEM_PROCESSOR = $(BR2_ARCH)
pkg-cmake.mk:		-e 's#@@CMAKE_SYSTEM_PROCESSOR@@#$(call qstrip,$(CMAKE_SYSTEM_PROCESSOR))#' \
pkg-cmake.mk:		-e 's#@@CMAKE_BUILD_TYPE@@#$(if $(BR2_ENABLE_DEBUG),Debug,Release)#' \
pkg-download.mk:# FTP servers, Git repositories, Subversion repositories, Mercurial
pkg-download.mk:# of the source repository for their corresponding SCM,
pkg-download.mk:		$(if $($(PKG)_GIT_SUBMODULES),-r) \
pkg-download.mk:		-H $(PKGDIR)/$($(PKG)_RAWNAME).hash \
pkg-download.mk:		$($(PKG)_RAW_BASE_NAME) \
pkg-download.mk:		$($(PKG)_RAW_BASE_NAME) \
pkg-download.mk:		$($(PKG)_RAWNAME) \
pkg-download.mk:		$($(PKG)_RAW_BASE_NAME) \
pkg-download.mk:		$($(PKG)_RAW_BASE_NAME) \
pkg-download.mk:		-H $(PKGDIR)/$($(PKG)_RAWNAME).hash \
pkg-download.mk:		$($(PKG)_RAW_BASE_NAME) \
pkg-download.mk:		-H $(PKGDIR)/$($(PKG)_RAWNAME).hash \
pkg-download.mk:		-H $(PKGDIR)/$($(PKG)_RAWNAME).hash \
pkg-download.mk:# 1) BR2_PRIMARY_SITE if enabled
pkg-download.mk:# 2) Download site, unless BR2_PRIMARY_SITE_ONLY is set
pkg-download.mk:# 3) BR2_BACKUP_SITE if enabled, unless BR2_PRIMARY_SITE_ONLY is set
pkg-download.mk:# For PRIMARY and BACKUP site, any ? in the URL is replaced by %3F. A ? in
pkg-download.mk:# the URL is used to separate query arguments, but the PRIMARY and BACKUP
pkg-download.mk:	$(Q)$(if $(filter bzr cvs hg svn,$($(PKG)_SITE_METHOD)),export BR_NO_CHECK_HASH_FOR=$(2);) \
pkg-download.mk:	if test -n "$(call qstrip,$(BR2_PRIMARY_SITE))" ; then \
pkg-download.mk:		case "$(call geturischeme,$(BR2_PRIMARY_SITE))" in \
pkg-download.mk:			file) $(call $(3)_LOCALFILES,$(BR2_PRIMARY_SITE)/$(2),$(2)) && exit ;; \
pkg-download.mk:			scp) $(call $(3)_SCP,$(BR2_PRIMARY_SITE)/$(2),$(2)) && exit ;; \
pkg-download.mk:			*) $(call $(3)_WGET,$(BR2_PRIMARY_SITE)/$(subst ?,%3F,$(2)),$(2)) && exit ;; \
pkg-download.mk:	if test "$(BR2_PRIMARY_SITE_ONLY)" = "y" ; then \
pkg-download.mk:		case "$($(PKG)_SITE_METHOD)" in \
pkg-generic.mk:# autotools-based and CMake-based packages).
pkg-generic.mk:#   1. Metadata information about the package: name, version,
pkg-generic.mk:# $(GLOBAL_INSTRUMENTATION_HOOKS) and pass each of them
pkg-generic.mk:	$(foreach hook,$(GLOBAL_INSTRUMENTATION_HOOKS),$(call $(hook),start,$(1),$($(PKG)_NAME))$(sep))
pkg-generic.mk:	$(foreach hook,$(GLOBAL_INSTRUMENTATION_HOOKS),$(call $(hook),end,$(1),$($(PKG)_NAME))$(sep))
pkg-generic.mk:GLOBAL_INSTRUMENTATION_HOOKS += step_time
pkg-generic.mk:# Note that the MD5 is also stored, in order to identify if the files are
pkg-generic.mk:# a file named .br_filelist_after the list of files (and their MD5) currently
pkg-generic.mk:GLOBAL_INSTRUMENTATION_HOOKS += step_pkg_size
pkg-generic.mk:			-a $(BR2_READELF_ARCH_NAME))
pkg-generic.mk:GLOBAL_INSTRUMENTATION_HOOKS += check_bin_arch
pkg-generic.mk:GLOBAL_INSTRUMENTATION_HOOKS += check_host_rpath
pkg-generic.mk:GLOBAL_INSTRUMENTATION_HOOKS += step_check_build_dir
pkg-generic.mk:ifneq ($(BR2_INSTRUMENTATION_SCRIPTS),)
pkg-generic.mk:	@$(foreach user_hook, $(BR2_INSTRUMENTATION_SCRIPTS), \
pkg-generic.mk:GLOBAL_INSTRUMENTATION_HOOKS += step_user
pkg-generic.mk:			$(call MESSAGE,"Downloading") ; \
pkg-generic.mk:	@$(call MESSAGE,"Extracting")
pkg-generic.mk:	$($(PKG)_EXTRACT_CMDS)
pkg-generic.mk:	@$(call MESSAGE,"Syncing from source dir $(SRCDIR)")
pkg-generic.mk:# The RAWNAME variable is the lowercased package name, which allows to
pkg-generic.mk:$(BUILD_DIR)/%/.stamp_patched: PATCH_BASE_DIRS += $(addsuffix /$(RAWNAME),$(call qstrip,$(BR2_GLOBAL_PATCH_DIR)))
pkg-generic.mk:	@$(call MESSAGE,"Patching")
pkg-generic.mk:	@$(call MESSAGE,"Configuring")
pkg-generic.mk:	$($(PKG)_CONFIGURE_CMDS)
pkg-generic.mk:	@$(call MESSAGE,"Building")
pkg-generic.mk:	+$($(PKG)_BUILD_CMDS)
pkg-generic.mk:	@$(call MESSAGE,"Installing to host directory")
pkg-generic.mk:	+$($(PKG)_INSTALL_CMDS)
pkg-generic.mk:	@$(call MESSAGE,"Installing to staging directory")
pkg-generic.mk:	+$($(PKG)_INSTALL_STAGING_CMDS)
pkg-generic.mk:		$(call MESSAGE,"Fixing package configuration files") ;\
pkg-generic.mk:	@$(call MESSAGE,"Fixing libtool files")
pkg-generic.mk:	$(foreach hook,$($(PKG)_PRE_INSTALL_IMAGES_HOOKS),$(call $(hook))$(sep))
pkg-generic.mk:	@$(call MESSAGE,"Installing to images directory")
pkg-generic.mk:	+$($(PKG)_INSTALL_IMAGES_CMDS)
pkg-generic.mk:	$(foreach hook,$($(PKG)_POST_INSTALL_IMAGES_HOOKS),$(call $(hook))$(sep))
pkg-generic.mk:	@$(call MESSAGE,"Installing to target")
pkg-generic.mk:	+$($(PKG)_INSTALL_TARGET_CMDS)
pkg-generic.mk:	$(if $(BR2_INIT_SYSTEMD),\
pkg-generic.mk:		$($(PKG)_INSTALL_INIT_SYSTEMD))
pkg-generic.mk:		$(RM) -f $(addprefix $(TARGET_DIR)/usr/bin/,$($(PKG)_CONFIG_SCRIPTS)) ; \
pkg-generic.mk:$(2)_NAME			=  $(1)
pkg-generic.mk:$(2)_RAWNAME			=  $$(patsubst host-%,%,$(1))
pkg-generic.mk:$(2)_BASE_NAME	= $$(if $$($(2)_VERSION),$(1)-$$($(2)_VERSION),$(1))
pkg-generic.mk:$(2)_RAW_BASE_NAME = $$(if $$($(2)_VERSION),$$($(2)_RAWNAME)-$$($(2)_VERSION),$$($(2)_RAWNAME))
pkg-generic.mk:$(2)_DIR	=  $$(BUILD_DIR)/$$($(2)_BASE_NAME)
pkg-generic.mk:ifndef $(2)_STRIP_COMPONENTS
pkg-generic.mk: ifdef $(3)_STRIP_COMPONENTS
pkg-generic.mk:  $(2)_STRIP_COMPONENTS = $$($(3)_STRIP_COMPONENTS)
pkg-generic.mk:  $(2)_STRIP_COMPONENTS ?= 1
pkg-generic.mk:  $(2)_SOURCE			?= $$($(2)_RAW_BASE_NAME).tar.gz
pkg-generic.mk:ifndef $(2)_SITE_METHOD
pkg-generic.mk: ifdef $(3)_SITE_METHOD
pkg-generic.mk:  $(2)_SITE_METHOD = $$($(3)_SITE_METHOD)
pkg-generic.mk:	$(2)_SITE_METHOD = $$(call geturischeme,$$($(2)_SITE))
pkg-generic.mk:ifneq ($$($(2)_GIT_SUBMODULES),)
pkg-generic.mk: ifneq ($$($(2)_SITE_METHOD),git)
pkg-generic.mk:	   'git' method (uses '$$($(2)_SITE_METHOD)' instead))
pkg-generic.mk:ifeq ($$($(2)_SITE_METHOD),local)
pkg-generic.mk:$(2)_REDIST_SOURCES_DIR = $$(REDIST_SOURCES_DIR_$$(call UPPERCASE,$(4)))/$$($(2)_RAW_BASE_NAME)
pkg-generic.mk:$(2)_INSTALL_IMAGES		?= NO
pkg-generic.mk:$(2)_TARGET_INSTALL_IMAGES =	$$($(2)_DIR)/.stamp_images_installed
pkg-generic.mk:$(2)_EXTRACT_CMDS ?= \
pkg-generic.mk:	$$(TAR) --strip-components=$$($(2)_STRIP_COMPONENTS) \
pkg-generic.mk:$(2)_PRE_INSTALL_IMAGES_HOOKS   ?=
pkg-generic.mk:$(2)_POST_INSTALL_IMAGES_HOOKS  ?=
pkg-generic.mk:$(2)_ROOTFS_PRE_CMD_HOOKS       ?=
pkg-generic.mk:$(2)_ROOTFS_POST_CMD_HOOKS      ?=
pkg-generic.mk:ifeq ($$($(2)_INSTALL_IMAGES),YES)
pkg-generic.mk:$(1)-install-images:		$$($(2)_TARGET_INSTALL_IMAGES)
pkg-generic.mk:$$($(2)_TARGET_INSTALL_IMAGES):	$$($(2)_TARGET_BUILD)
pkg-generic.mk:			rm -f $$($(2)_TARGET_INSTALL_IMAGES)
pkg-generic.mk:$$($(2)_TARGET_INSTALL_IMAGES):		PKG=$(2)
pkg-generic.mk:$$($(2)_TARGET_PATCH):			RAWNAME=$$(patsubst host-%,%,$(1))
pkg-generic.mk:$(2)_MANIFEST_LICENSE_FILES = $$($(2)_LICENSE_FILES)
pkg-generic.mk:	@$$(call MESSAGE,"Collecting legal info")
pkg-generic.mk:	$(Q)$$(call legal-warning-pkg,$$($(2)_RAW_BASE_NAME),cannot save license ($(2)_LICENSE_FILES not defined))
pkg-generic.mk:	$(Q)$$(foreach F,$$($(2)_LICENSE_FILES),$$(call legal-license-file,$$($(2)_RAWNAME),$$($(2)_RAW_BASE_NAME),$$($(2)_PKGDIR),$$(F),$$($(2)_DIR)/$$(F),$$(call UPPERCASE,$(4)))$$(sep))
pkg-generic.mk:ifeq ($$($(2)_SITE_METHOD),local)
pkg-generic.mk:	@$$(call legal-warning-nosource,$$($(2)_RAWNAME),local)
pkg-generic.mk:	@$$(call legal-warning-nosource,$$($(2)_RAWNAME),override)
pkg-generic.mk:	@$$(call legal-manifest,$$($(2)_RAWNAME),$$($(2)_VERSION),$$($(2)_LICENSE),$$($(2)_MANIFEST_LICENSE_FILES),$$($(2)_ACTUAL_SOURCE_TARBALL),$$($(2)_ACTUAL_SOURCE_SITE),$$(call UPPERCASE,$(4)))
pkg-generic.mk:$(eval $(call check-deprecated-variable,$(2)_MAKE_OPT,$(2)_MAKE_OPTS))
pkg-generic.mk:ifneq ($$($(2)_PERMISSIONS),)
pkg-generic.mk:PACKAGES_PERMISSIONS_TABLE += $$($(2)_PERMISSIONS)$$(sep)
pkg-generic.mk:ROOTFS_PRE_CMD_HOOKS += $$($(2)_ROOTFS_PRE_CMD_HOOKS)
pkg-generic.mk:ROOTFS_POST_CMD_HOOKS += $$($(2)_ROOTFS_POST_CMD_HOOKS)
pkg-generic.mk:ifeq ($$($(2)_SITE_METHOD),svn)
pkg-generic.mk:else ifeq ($$($(2)_SITE_METHOD),git)
pkg-generic.mk:else ifeq ($$($(2)_SITE_METHOD),bzr)
pkg-generic.mk:else ifeq ($$($(2)_SITE_METHOD),scp)
pkg-generic.mk:else ifeq ($$($(2)_SITE_METHOD),hg)
pkg-generic.mk:else ifeq ($$($(2)_SITE_METHOD),cvs)
pkg-generic.mk:endif # SITE_METHOD
pkg-generic.mk:ifneq ($$($(2)_HELP_CMDS),)
pkg-kconfig.mk:$(2)_KCONFIG_FIXUP_CMDS ?=
pkg-kconfig.mk:$(2)_KCONFIG_FRAGMENT_FILES ?=
pkg-kconfig.mk:$$($(2)_KCONFIG_FILE) $$($(2)_KCONFIG_FRAGMENT_FILES): | $(1)-patch
pkg-kconfig.mk:	for f in $$($(2)_KCONFIG_FILE) $$($(2)_KCONFIG_FRAGMENT_FILES); do \
pkg-kconfig.mk:$(2)_KCONFIG_MAKE = \
pkg-kconfig.mk:	$$($(2)_MAKE_ENV) $$(MAKE) -C $$($(2)_DIR) $$($(2)_KCONFIG_OPTS)
pkg-kconfig.mk:# $(2)_KCONFIG_MAKE may already rely on shell expansion. As the $() syntax
pkg-kconfig.mk:# of the shell conflicts with Make's own syntax, this means that backticks
pkg-kconfig.mk:# does not nest, and we need to use Make instead of the shell to handle
pkg-kconfig.mk:	$$(shell $$($(2)_KCONFIG_MAKE) -pn config 2>/dev/null | \
pkg-kconfig.mk:		$$(Q)$$($(2)_KCONFIG_MAKE) olddefconfig,
pkg-kconfig.mk:			$$(Q)$$($(2)_KCONFIG_MAKE) oldnoconfig,
pkg-kconfig.mk:			$$(Q)(yes "" | $$($(2)_KCONFIG_MAKE) oldconfig)))
pkg-kconfig.mk:$$($(2)_DIR)/$$($(2)_KCONFIG_DOTCONFIG): $$($(2)_KCONFIG_FILE) $$($(2)_KCONFIG_FRAGMENT_FILES)
pkg-kconfig.mk:		$$($(2)_KCONFIG_MAKE) $$($(2)_KCONFIG_DEFCONFIG), \
pkg-kconfig.mk:		$$(@) $$($(2)_KCONFIG_FRAGMENT_FILES)
pkg-kconfig.mk:# If _KCONFIG_FILE or _KCONFIG_FRAGMENT_FILES exists, this dependency is
pkg-kconfig.mk:	$$($(2)_KCONFIG_FIXUP_CMDS)
pkg-kconfig.mk:$(2)_CONFIGURATOR_MAKE_ENV = \
pkg-kconfig.mk:	$$(filter-out PATH=% PKG_CONFIG=% PKG_CONFIG_SYSROOT_DIR=% PKG_CONFIG_LIBDIR=%,$$($(2)_MAKE_ENV)) \
pkg-kconfig.mk:	$$($(2)_CONFIGURATOR_MAKE_ENV) $$(MAKE) -C $$($(2)_DIR) \
pkg-kconfig.mk:	$$($(2)_MAKE_ENV) $$(MAKE) -C $$($(2)_DIR) \
pkg-kconfig.mk:	@$$(if $$($(2)_KCONFIG_FRAGMENT_FILES), \
pkg-kconfig.mk:	@$$(if $$($(2)_KCONFIG_FRAGMENT_FILES), \
pkg-kernel-module.mk:#   define FOO_MOD_TWEAK
pkg-kernel-module.mk:#   FOO_POST_BUILD_HOOKS += FOO_MOD_TWEAK
pkg-kernel-module.mk:LINUX_NEEDS_MODULES = y
pkg-kernel-module.mk:$(2)_MAKE ?= $$(MAKE)
pkg-kernel-module.mk:$(2)_MODULE_SUBDIRS ?= .
pkg-kernel-module.mk:define $(2)_KERNEL_MODULES_BUILD
pkg-kernel-module.mk:	@$$(call MESSAGE,"Building kernel module(s)")
pkg-kernel-module.mk:	$$(foreach d,$$($(2)_MODULE_SUBDIRS), \
pkg-kernel-module.mk:		$$(LINUX_MAKE_ENV) $$($$(PKG)_MAKE) \
pkg-kernel-module.mk:			$$(LINUX_MAKE_FLAGS) \
pkg-kernel-module.mk:			$$($(2)_MODULE_MAKE_OPTS) \
pkg-kernel-module.mk:			M=$$(@D)/$$(d) \
pkg-kernel-module.mk:$(2)_POST_BUILD_HOOKS += $(2)_KERNEL_MODULES_BUILD
pkg-kernel-module.mk:define $(2)_KERNEL_MODULES_INSTALL
pkg-kernel-module.mk:	@$$(call MESSAGE,"Installing kernel module(s)")
pkg-kernel-module.mk:	$$(foreach d,$$($(2)_MODULE_SUBDIRS), \
pkg-kernel-module.mk:		$$(LINUX_MAKE_ENV) $$($$(PKG)_MAKE) \
pkg-kernel-module.mk:			$$(LINUX_MAKE_FLAGS) \
pkg-kernel-module.mk:			$$($(2)_MODULE_MAKE_OPTS) \
pkg-kernel-module.mk:			M=$$(@D)/$$(d) \
pkg-kernel-module.mk:$(2)_POST_INSTALL_TARGET_HOOKS += $(2)_KERNEL_MODULES_INSTALL
pkg-luarocks.mk:$(2)_NAME_UPSTREAM	?= $(1)
pkg-luarocks.mk:$(2)_SUBDIR		?= $$($(2)_NAME_UPSTREAM)-$$(shell echo "$$($(2)_VERSION)" | sed -e "s/-[0-9]$$$$//")
pkg-luarocks.mk:$(2)_ROCKSPEC		?= $$(call LOWERCASE,$$($(2)_NAME_UPSTREAM))-$$($(2)_VERSION).rockspec
pkg-luarocks.mk:$(2)_SOURCE		?= $$(call LOWERCASE,$$($(2)_NAME_UPSTREAM))-$$($(2)_VERSION).src.rock
pkg-luarocks.mk:$(2)_SITE		?= $$(call qstrip,$$(BR2_LUAROCKS_MIRROR))
pkg-luarocks.mk:ifndef $(2)_EXTRACT_CMDS
pkg-luarocks.mk:define $(2)_EXTRACT_CMDS
pkg-luarocks.mk:		$$(LUAROCKS_RUN_ENV) $$(LUAROCKS_RUN_CMD) unpack --force $$(DL_DIR)/$$($(2)_SOURCE)
pkg-luarocks.mk:ifndef $(2)_INSTALL_TARGET_CMDS
pkg-luarocks.mk:define $(2)_INSTALL_TARGET_CMDS
pkg-luarocks.mk:		$$(LUAROCKS_RUN_CMD) make --keep $$($(2)_ROCKSPEC) $$($(2)_BUILD_OPTS)
pkg-perl.mk:# steps are doing, if needed. For example, if <PKG>_BUILD_CMDS is
pkg-perl.mk:PERL_ARCHNAME = $(ARCH)-linux
pkg-perl.mk:#       legal values are MB and EUMM: if a module comes
pkg-perl.mk:#       with both a Makefile.PL and a Build.PL, use the
pkg-perl.mk:#       former (EUMM) or the latter (MB); if the module
pkg-perl.mk:$(2)_PREFER_INSTALLER ?= MB
pkg-perl.mk:ifndef $(2)_CONFIGURE_CMDS
pkg-perl.mk:define $(2)_CONFIGURE_CMDS
pkg-perl.mk:	cd $$($$(PKG)_SRCDIR) && if [ -f Build.PL ] && [ $$($(2)_PREFER_INSTALLER) != "EUMM" ] ; then \
pkg-perl.mk:		PERL_MM_USE_DEFAULT=1 \
pkg-perl.mk:			--include_dirs $$(STAGING_DIR)/usr/lib/perl5/$$(PERL_VERSION)/$$(PERL_ARCHNAME)/CORE \
pkg-perl.mk:			--install_path arch=/usr/lib/perl5/site_perl/$$(PERL_VERSION)/$$(PERL_ARCHNAME) \
pkg-perl.mk:		PERL_MM_USE_DEFAULT=1 \
pkg-perl.mk:		$$(PERL_RUN) Makefile.PL \
pkg-perl.mk:			OPTIMIZE=" " \
pkg-perl.mk:			INSTALLVENDORARCH=/usr/lib/perl5/site_perl/$$(PERL_VERSION)/$$(PERL_ARCHNAME) \
pkg-perl.mk:			INSTALLVENDORMAN1DIR=/usr/share/man/man1 \
pkg-perl.mk:			INSTALLVENDORMAN3DIR=/usr/share/man/man3 \
pkg-perl.mk:define $(2)_CONFIGURE_CMDS
pkg-perl.mk:	cd $$($$(PKG)_SRCDIR) && if [ -f Build.PL ] && [ $$($(2)_PREFER_INSTALLER) != "EUMM" ] ; then \
pkg-perl.mk:		PERL_MM_USE_DEFAULT=1 \
pkg-perl.mk:		PERL_MM_USE_DEFAULT=1 \
pkg-perl.mk:		$$(PERL_RUN) Makefile.PL \
pkg-perl.mk:ifndef $(2)_BUILD_CMDS
pkg-perl.mk:define $(2)_BUILD_CMDS
pkg-perl.mk:	cd $$($$(PKG)_SRCDIR) && if [ -f Build.PL ] && [ $$($(2)_PREFER_INSTALLER) != "EUMM" ] ; then \
pkg-perl.mk:		$$(MAKE1) \
pkg-perl.mk:			PERL_INC=$$(STAGING_DIR)/usr/lib/perl5/$$(PERL_VERSION)/$$(PERL_ARCHNAME)/CORE \
pkg-perl.mk:define $(2)_BUILD_CMDS
pkg-perl.mk:	cd $$($$(PKG)_SRCDIR) && if [ -f Build.PL ] && [ $$($(2)_PREFER_INSTALLER) != "EUMM" ] ; then \
pkg-perl.mk:		$$(MAKE1) $$($(2)_BUILD_OPTS) pure_all; \
pkg-perl.mk:ifndef $(2)_INSTALL_CMDS
pkg-perl.mk:define $(2)_INSTALL_CMDS
pkg-perl.mk:	cd $$($$(PKG)_SRCDIR) && if [ -f Build.PL ] && [ $$($(2)_PREFER_INSTALLER) != "EUMM" ] ; then \
pkg-perl.mk:		$$(MAKE1) $$($(2)_INSTALL_TARGET_OPTS) pure_install; \
pkg-perl.mk:ifndef $(2)_INSTALL_TARGET_CMDS
pkg-perl.mk:define $(2)_INSTALL_TARGET_CMDS
pkg-perl.mk:	cd $$($$(PKG)_SRCDIR) && if [ -f Build.PL ] && [ $$($(2)_PREFER_INSTALLER) != "EUMM" ] ; then \
pkg-perl.mk:		$$(MAKE1) $$($(2)_INSTALL_TARGET_OPTS) pure_install; \
pkg-python.mk:# steps are doing, if needed. For example, if <PKG>_BUILD_CMDS is
pkg-python.mk:define PKG_PYTHON_SYSCONFIGDATA_NAME
pkg-python.mk:$(basename $(notdir $(wildcard $(STAGING_DIR)/usr/lib/python$(PYTHON3_VERSION_MAJOR)/_sysconfigdata_m_linux_*.py)))
pkg-python.mk:	_PYTHON_SYSCONFIGDATA_NAME="$(PKG_PYTHON_SYSCONFIGDATA_NAME)" \
pkg-python.mk:	_PYTHON_SYSCONFIGDATA_NAME="$(PKG_PYTHON_SYSCONFIGDATA_NAME)" \
pkg-python.mk:ifndef $(2)_BUILD_CMDS
pkg-python.mk:define $(2)_BUILD_CMDS
pkg-python.mk:ifndef $(2)_INSTALL_CMDS
pkg-python.mk:define $(2)_INSTALL_CMDS
pkg-python.mk:ifndef $(2)_INSTALL_TARGET_CMDS
pkg-python.mk:define $(2)_INSTALL_TARGET_CMDS
pkg-python.mk:ifndef $(2)_INSTALL_STAGING_CMDS
pkg-python.mk:define $(2)_INSTALL_STAGING_CMDS
pkg-rebar.mk:# steps are doing, if needed. For example, if <PKG>_BUILD_CMDS is
pkg-rebar.mk:	ERL_COMPILER_OPTIONS='{i, "$(REBAR_HOST_DEPS_DIR)"}' \
pkg-rebar.mk:	ERL_COMPILER_OPTIONS='{i, "$(REBAR_TARGET_DEPS_DIR)"}' \
pkg-rebar.mk:ifndef $(2)_BUILD_CMDS
pkg-rebar.mk:define $(2)_BUILD_CMDS
pkg-rebar.mk:		$$(TARGET_MAKE_ENV) \
pkg-rebar.mk:ifndef $(2)_INSTALL_STAGING_CMDS
pkg-rebar.mk:define $(2)_INSTALL_STAGING_CMDS
pkg-rebar.mk:ifndef $(2)_INSTALL_TARGET_CMDS
pkg-rebar.mk:define $(2)_INSTALL_TARGET_CMDS
pkg-rebar.mk:ifndef $(2)_BUILD_CMDS
pkg-rebar.mk:define $(2)_BUILD_CMDS
pkg-rebar.mk:		$$(HOST_MAKE_ENV) \
pkg-rebar.mk:ifndef $(2)_INSTALL_CMDS
pkg-rebar.mk:define $(2)_INSTALL_CMDS
pkg-utils.mk:# Manipulation of .config files based on the Kconfig
pkg-utils.mk:# directory from its makefile directory, using the $(MAKEFILE_LIST)
pkg-utils.mk:pkgdir = $(dir $(lastword $(MAKEFILE_LIST)))
pkg-utils.mk:#   $(eval $(call check-deprecated-variable,FOO_MAKE_OPT,FOO_MAKE_OPTS))
pkg-utils.mk:	echo '"$(1)","$(2)","$(3)","$(4)","$(5)","$(6)"' >>$(LEGAL_MANIFEST_CSV_$(7))
pkg-waf.mk:# are doing, if needed. For example, if <PKG>_BUILD_CMDS is already defined,
pkg-waf.mk:ifndef $(2)_CONFIGURE_CMDS
pkg-waf.mk:define $(2)_CONFIGURE_CMDS
pkg-waf.mk:ifndef $(2)_BUILD_CMDS
pkg-waf.mk:define $(2)_BUILD_CMDS
pkg-waf.mk:	$$(TARGET_MAKE_ENV) $$(HOST_DIR)/bin/python2 $$($(2)_WAF) \
pkg-waf.mk:ifndef $(2)_INSTALL_STAGING_CMDS
pkg-waf.mk:define $(2)_INSTALL_STAGING_CMDS
pkg-waf.mk:	$$(TARGET_MAKE_ENV) $$(HOST_DIR)/bin/python2 $$($(2)_WAF) \
pkg-waf.mk:ifndef $(2)_INSTALL_TARGET_CMDS
pkg-waf.mk:define $(2)_INSTALL_TARGET_CMDS
pkg-waf.mk:	$$(TARGET_MAKE_ENV) $$(HOST_DIR)/bin/python2 $$($(2)_WAF) \
